# Autogenerated by gen_expressions.py
from __future__ import annotations
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any
from tokens import Token


class Expr(ABC):
    @abstractmethod
    def accept(self, visitor: Visitor):
        raise NotImplementedError


class Visitor(ABC):
    @abstractmethod
    def visit_ternary(self, expr: Ternary):
        raise NotImplementedError

    @abstractmethod
    def visit_binary(self, expr: Binary):
        raise NotImplementedError

    @abstractmethod
    def visit_grouping(self, expr: Grouping):
        raise NotImplementedError

    @abstractmethod
    def visit_literal(self, expr: Literal):
        raise NotImplementedError

    @abstractmethod
    def visit_unary(self, expr: Unary):
        raise NotImplementedError


@dataclass
class Ternary(Expr):
    operator: Token
    first: Expr
    second: Expr
    third: Expr

    def accept(self, visitor: Visitor):
        return visitor.visit_ternary(self)


@dataclass
class Binary(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor: Visitor):
        return visitor.visit_binary(self)


@dataclass
class Grouping(Expr):
    expression: Expr

    def accept(self, visitor: Visitor):
        return visitor.visit_grouping(self)


@dataclass
class Literal(Expr):
    value: Any

    def accept(self, visitor: Visitor):
        return visitor.visit_literal(self)


@dataclass
class Unary(Expr):
    operator: Token
    right: Expr

    def accept(self, visitor: Visitor):
        return visitor.visit_unary(self)
