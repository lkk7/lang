# Autogenerated by gen_ast.py
from __future__ import annotations

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any

from parsing.tokens import Token


class Expr(ABC):
    @abstractmethod
    def accept(self, visitor: ExprVisitor):
        raise NotImplementedError


class Stmt(ABC):
    @abstractmethod
    def accept(self, visitor: StmtVisitor):
        raise NotImplementedError


class ExprVisitor(ABC):
    @abstractmethod
    def visit_ternary(self, expr: Ternary):
        raise NotImplementedError

    @abstractmethod
    def visit_binary(self, expr: Binary):
        raise NotImplementedError

    @abstractmethod
    def visit_grouping(self, expr: Grouping):
        raise NotImplementedError

    @abstractmethod
    def visit_literal(self, expr: Literal):
        raise NotImplementedError

    @abstractmethod
    def visit_unary(self, expr: Unary):
        raise NotImplementedError

    @abstractmethod
    def visit_variable(self, expr: Variable):
        raise NotImplementedError

    @abstractmethod
    def visit_assign(self, expr: Assign):
        raise NotImplementedError

    @abstractmethod
    def visit_logical(self, expr: Logical):
        raise NotImplementedError

    @abstractmethod
    def visit_call(self, expr: Call):
        raise NotImplementedError


class StmtVisitor(ABC):
    @abstractmethod
    def visit_blockstmt(self, stmt: BlockStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_expressionstmt(self, stmt: ExpressionStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_printstmt(self, stmt: PrintStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_varstmt(self, stmt: VarStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_ifstmt(self, stmt: IfStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_whilestmt(self, stmt: WhileStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_functionstmt(self, stmt: FunctionStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_returnstmt(self, stmt: ReturnStmt):
        raise NotImplementedError


@dataclass(eq=False, frozen=True)
class Ternary(Expr):
    operator: Token
    first: Expr
    second: Expr
    third: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_ternary(self)


@dataclass(eq=False, frozen=True)
class Binary(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_binary(self)


@dataclass(eq=False, frozen=True)
class Grouping(Expr):
    expression: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_grouping(self)


@dataclass(eq=False, frozen=True)
class Literal(Expr):
    value: Any

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_literal(self)


@dataclass(eq=False, frozen=True)
class Unary(Expr):
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_unary(self)


@dataclass(eq=False, frozen=True)
class Variable(Expr):
    name: Token

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_variable(self)


@dataclass(eq=False, frozen=True)
class Assign(Expr):
    name: Token
    value: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_assign(self)


@dataclass(eq=False, frozen=True)
class Logical(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_logical(self)


@dataclass(eq=False, frozen=True)
class Call(Expr):
    callee: Expr
    paren: Token
    arguments: tuple[Expr, ...]

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_call(self)


@dataclass(eq=False, frozen=True)
class BlockStmt(Stmt):
    statements: tuple[Stmt, ...]

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_blockstmt(self)


@dataclass(eq=False, frozen=True)
class ExpressionStmt(Stmt):
    expression: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_expressionstmt(self)


@dataclass(eq=False, frozen=True)
class PrintStmt(Stmt):
    expression: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_printstmt(self)


@dataclass(eq=False, frozen=True)
class VarStmt(Stmt):
    name: Token
    initializer: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_varstmt(self)


@dataclass(eq=False, frozen=True)
class IfStmt(Stmt):
    condition: Expr
    then_branch: Stmt
    else_branch: Stmt

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_ifstmt(self)


@dataclass(eq=False, frozen=True)
class WhileStmt(Stmt):
    condition: Expr
    body: Stmt

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_whilestmt(self)


@dataclass(eq=False, frozen=True)
class FunctionStmt(Stmt):
    name: Token
    params: tuple[Token, ...]
    body: tuple[Stmt, ...]

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_functionstmt(self)


@dataclass(eq=False, frozen=True)
class ReturnStmt(Stmt):
    keyword: Token
    val: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_returnstmt(self)
