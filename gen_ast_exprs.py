expressions: dict[str, list[str]] = {
    "Ternary": [
        "operator: Token",
        "first: Expr", "second: Expr", "third: Expr"
    ],
    "Binary": ["left: Expr", "operator: Token", "right: Expr"],
    "Grouping": ["expression: Expr"],
    "Literal": ["value: Any"],
    "Unary": ["operator: Token", "right: Expr"]
}

setup_lines = """# Autogenerated by gen_expressions.py
from __future__ import annotations
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any
from tokens import Token


class Expr(ABC):
    @abstractmethod
    def accept(self, visitor: Visitor):
        raise NotImplementedError
"""


class AstExprsGenerator:
    def __init__(self) -> None:
        self.lines: list[str] = [setup_lines]

    def gen_visitor(self):
        self.lines.append("\n\nclass Visitor(ABC):")
        for expr in expressions:
            self.lines.append(
                "\n    @abstractmethod\n"
                f"    def visit_{expr.lower()}(self, expr: {expr}):\n"
                "        raise NotImplementedError\n"
            )

    def gen_exprs(self):
        for expr, fields in expressions.items():
            expr_definition = (
                "\n\n@dataclass\n"
                f"class {expr}(Expr):\n"
            )
            for field in fields:
                expr_definition += f"    {field}\n"
            expr_definition += (
                f"\n    def accept(self, visitor: Visitor):"
                f"\n        return visitor.visit_{expr.lower()}(self)\n"
            )
            self.lines.append(expr_definition)

    def output(self, filename):
        with open(filename, 'w') as file:
            file.write(''.join(self.lines))


if __name__ == "__main__":
    generator = AstExprsGenerator()
    generator.gen_visitor()
    generator.gen_exprs()
    generator.output('expressions.py')
