# Autogenerated by gen_ast.py
from __future__ import annotations
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any
from tokens import Token


class Expr(ABC):
    @abstractmethod
    def accept(self, visitor: ExprVisitor):
        raise NotImplementedError


class Stmt(ABC):
    @abstractmethod
    def accept(self, visitor: StmtVisitor):
        raise NotImplementedError


class ExprVisitor(ABC):
    @abstractmethod
    def visit_ternary(self, expr: Ternary):
        raise NotImplementedError

    @abstractmethod
    def visit_binary(self, expr: Binary):
        raise NotImplementedError

    @abstractmethod
    def visit_grouping(self, expr: Grouping):
        raise NotImplementedError

    @abstractmethod
    def visit_literal(self, expr: Literal):
        raise NotImplementedError

    @abstractmethod
    def visit_unary(self, expr: Unary):
        raise NotImplementedError

    @abstractmethod
    def visit_variable(self, expr: Variable):
        raise NotImplementedError

    @abstractmethod
    def visit_assign(self, expr: Assign):
        raise NotImplementedError


class StmtVisitor(ABC):
    @abstractmethod
    def visit_blockstmt(self, stmt: BlockStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_expressionstmt(self, stmt: ExpressionStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_printstmt(self, stmt: PrintStmt):
        raise NotImplementedError

    @abstractmethod
    def visit_varstmt(self, stmt: VarStmt):
        raise NotImplementedError


@dataclass
class Ternary(Expr):
    operator: Token
    first: Expr
    second: Expr
    third: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_ternary(self)


@dataclass
class Binary(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_binary(self)


@dataclass
class Grouping(Expr):
    expression: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_grouping(self)


@dataclass
class Literal(Expr):
    value: Any

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_literal(self)


@dataclass
class Unary(Expr):
    operator: Token
    right: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_unary(self)


@dataclass
class Variable(Expr):
    name: Token

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_variable(self)


@dataclass
class Assign(Expr):
    name: Token
    value: Expr

    def accept(self, visitor: ExprVisitor):
        return visitor.visit_assign(self)


@dataclass
class BlockStmt(Expr):
    statements: list[Stmt]

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_blockstmt(self)


@dataclass
class ExpressionStmt(Expr):
    expression: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_expressionstmt(self)


@dataclass
class PrintStmt(Expr):
    expression: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_printstmt(self)


@dataclass
class VarStmt(Expr):
    name: Token
    initializer: Expr

    def accept(self, visitor: StmtVisitor):
        return visitor.visit_varstmt(self)
